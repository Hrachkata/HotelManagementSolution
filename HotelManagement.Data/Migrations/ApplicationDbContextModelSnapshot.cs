// <auto-generated />
using System;
using System.Diagnostics.CodeAnalysis;
using HotelManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelManagement.Data.Migrations
{
    [ExcludeFromCodeCoverage]
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1200)
                        .HasColumnType("nvarchar(1200)");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 12, 7, 21, 43, 56, 305, DateTimeKind.Local).AddTicks(8438),
                            Description = "Some Department",
                            IsActive = true,
                            Name = "F&B"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 12, 7, 21, 43, 56, 305, DateTimeKind.Local).AddTicks(8489),
                            Description = "This is the human resource department with access to employee management and hiring new employees.",
                            IsActive = true,
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2022, 12, 7, 21, 43, 56, 305, DateTimeKind.Local).AddTicks(8493),
                            Description = "This is the IT department with access to employee management, hiring new employees, admin panel and front desk.",
                            IsActive = true,
                            Name = "IT department"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2022, 12, 7, 21, 43, 56, 305, DateTimeKind.Local).AddTicks(8497),
                            Description = "This is the front desk/reception department with access to reservations and front desk.",
                            IsActive = true,
                            Name = "Reservations"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2022, 12, 7, 21, 43, 56, 305, DateTimeKind.Local).AddTicks(8502),
                            Description = "This is the director department with access to employee management, hiring new employees, admin panel and front desk.",
                            IsActive = true,
                            Name = "Director"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2022, 12, 7, 21, 43, 56, 305, DateTimeKind.Local).AddTicks(8507),
                            Description = "This is full access! NOT RECOMMENDED",
                            IsActive = true,
                            Name = "Owner"
                        });
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.EmployeeDepartment", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("EmployeesDepartments");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorNumber = 1,
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorNumber = 2,
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorNumber = 3,
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorNumber = 4,
                            IsActive = true
                        });
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("CheckedIn")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GuestEmail")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("GuestFirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("GuestLastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("GuestNationality")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("GuestPhoneNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfChildren")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<decimal?>("totalPrice")
                        .HasColumnType("decimal(18,4)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = "RFWSU6Q8",
                            Address = "Ararwaerawe st. 2",
                            ArrivalDate = new DateTime(2022, 11, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            CheckedIn = false,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureDate = new DateTime(2022, 12, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            GuestEmail = "bachokiro@abv.bg",
                            GuestFirstName = "Jogn",
                            GuestLastName = "Bonbon",
                            GuestNationality = "Ebnasdg",
                            GuestPhoneNumber = "43252352",
                            IsActive = true,
                            NumberOfChildren = 1,
                            NumberOfGuests = 2,
                            RoomId = 1,
                            totalPrice = 300m
                        },
                        new
                        {
                            Id = "ROATFZB7",
                            Address = "Berlinm st. 2",
                            ArrivalDate = new DateTime(2022, 11, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            CheckedIn = true,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureDate = new DateTime(2022, 12, 8, 0, 0, 0, 0, DateTimeKind.Local),
                            GuestEmail = "aeiotawi@abv.bg",
                            GuestFirstName = "Gorgon",
                            GuestLastName = "Maimun",
                            GuestNationality = "Etipiq",
                            GuestPhoneNumber = "432522342552",
                            IsActive = true,
                            NumberOfChildren = 1,
                            NumberOfGuests = 3,
                            RoomId = 4,
                            totalPrice = 7000m
                        },
                        new
                        {
                            Id = "RPQF4POU",
                            Address = "Avenue 235 st. 2",
                            ArrivalDate = new DateTime(2022, 12, 2, 0, 0, 0, 0, DateTimeKind.Local),
                            CheckedIn = true,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureDate = new DateTime(2022, 12, 12, 0, 0, 0, 0, DateTimeKind.Local),
                            GuestEmail = "bacro@abv.bg",
                            GuestFirstName = "Alex",
                            GuestLastName = "Malex",
                            GuestNationality = "Bulgarian",
                            GuestPhoneNumber = "74572",
                            IsActive = true,
                            NumberOfChildren = 1,
                            NumberOfGuests = 5,
                            RoomId = 6,
                            totalPrice = 3000m
                        },
                        new
                        {
                            Id = "RPD6746R",
                            Address = "Sofia 34 st. 2",
                            ArrivalDate = new DateTime(2022, 12, 17, 0, 0, 0, 0, DateTimeKind.Local),
                            CheckedIn = false,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            DepartureDate = new DateTime(2022, 12, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            GuestEmail = "karakan@abv.bg",
                            GuestFirstName = "Kapucin",
                            GuestLastName = "Krava",
                            GuestNationality = "Tigan",
                            GuestPhoneNumber = "4643453453352",
                            IsActive = true,
                            NumberOfChildren = 0,
                            NumberOfGuests = 2,
                            RoomId = 7,
                            totalPrice = 3840m
                        },
                        new
                        {
                            Id = "R72TSXV2",
                            Address = "Svishtov 532",
                            ArrivalDate = new DateTime(2022, 12, 27, 0, 0, 0, 0, DateTimeKind.Local),
                            CheckedIn = false,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DepartureDate = new DateTime(2023, 1, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            GuestEmail = "gasgao@abv.bg",
                            GuestFirstName = "Makaron",
                            GuestLastName = "Sharan",
                            GuestNationality = "Lujica",
                            GuestPhoneNumber = "247457452",
                            IsActive = true,
                            NumberOfChildren = 1,
                            NumberOfGuests = 2,
                            RoomId = 3,
                            totalPrice = 1000m
                        });
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.RoleDepartment", b =>
                {
                    b.Property<int>("RoleNameId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("RoleNameId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("RolesDepartments");

                    b.HasData(
                        new
                        {
                            RoleNameId = 1,
                            DepartmentId = 1
                        },
                        new
                        {
                            RoleNameId = 2,
                            DepartmentId = 2
                        },
                        new
                        {
                            RoleNameId = 3,
                            DepartmentId = 3
                        },
                        new
                        {
                            RoleNameId = 2,
                            DepartmentId = 3
                        },
                        new
                        {
                            RoleNameId = 6,
                            DepartmentId = 3
                        },
                        new
                        {
                            RoleNameId = 6,
                            DepartmentId = 4
                        },
                        new
                        {
                            RoleNameId = 3,
                            DepartmentId = 5
                        },
                        new
                        {
                            RoleNameId = 2,
                            DepartmentId = 5
                        },
                        new
                        {
                            RoleNameId = 5,
                            DepartmentId = 5
                        },
                        new
                        {
                            RoleNameId = 1,
                            DepartmentId = 6
                        },
                        new
                        {
                            RoleNameId = 2,
                            DepartmentId = 6
                        },
                        new
                        {
                            RoleNameId = 3,
                            DepartmentId = 6
                        },
                        new
                        {
                            RoleNameId = 4,
                            DepartmentId = 6
                        },
                        new
                        {
                            RoleNameId = 5,
                            DepartmentId = 6
                        },
                        new
                        {
                            RoleNameId = 6,
                            DepartmentId = 6
                        });
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.RoleName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("NameOfRole")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("RoleName");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameOfRole = "F&B"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameOfRole = "HUMAN RESOURCES"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameOfRole = "ADMIN"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameOfRole = "DIRECTOR"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameOfRole = "OWNER"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            IsActive = true,
                            NameOfRole = "FRONT DESK"
                        });
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCleaned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOutOfService")
                        .HasColumnType("bit");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 3,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 1,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 101,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 4,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 1,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 102,
                            RoomTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 4,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 1,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 103,
                            RoomTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 4,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 1,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 104,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 3,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 1,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 105,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 3,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 1,
                            IsActive = true,
                            IsCleaned = false,
                            IsOccupied = false,
                            IsOutOfService = true,
                            RoomNumber = 106,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 3,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 1,
                            IsActive = true,
                            IsCleaned = false,
                            IsOccupied = false,
                            IsOutOfService = true,
                            RoomNumber = 107,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 2,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 2,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 201,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 1,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 2,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 202,
                            RoomTypeId = 2
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 4,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 2,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 203,
                            RoomTypeId = 2
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 1,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 2,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 204,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 1,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 2,
                            IsActive = true,
                            IsCleaned = false,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 205,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 13,
                            Capacity = 1,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 2,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = true,
                            RoomNumber = 205,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 14,
                            Capacity = 2,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 3,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 301,
                            RoomTypeId = 3
                        },
                        new
                        {
                            Id = 15,
                            Capacity = 1,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 3,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 302,
                            RoomTypeId = 2
                        },
                        new
                        {
                            Id = 16,
                            Capacity = 4,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 3,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 303,
                            RoomTypeId = 3
                        },
                        new
                        {
                            Id = 17,
                            Capacity = 4,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 3,
                            IsActive = true,
                            IsCleaned = false,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 303,
                            RoomTypeId = 3
                        },
                        new
                        {
                            Id = 18,
                            Capacity = 2,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 4,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 401,
                            RoomTypeId = 4
                        },
                        new
                        {
                            Id = 19,
                            Capacity = 2,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 4,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 402,
                            RoomTypeId = 4
                        });
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("PricePerPerson")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            PricePerPerson = 100m,
                            Type = "Standard"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            PricePerPerson = 150m,
                            Type = "Apartment"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            PricePerPerson = 250m,
                            Type = "Deluxe"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2022, 12, 7, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            PricePerPerson = 400m,
                            Type = "President"
                        });
                });

            modelBuilder.Entity("HotelManagement.Data.Models.UserModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EGN")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RFID")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,4)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RFID")
                        .IsUnique();

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("[UserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("36fdc4d6-b4cc-4608-8f95-03c45b3c645f"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "23d715aa-ff53-409b-8792-ee33f39391ba",
                            CreatedOn = new DateTime(2022, 12, 7, 21, 43, 56, 305, DateTimeKind.Local).AddTicks(9314),
                            EGN = "123",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            MiddleName = "Admin",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAELoqjr00aDM4zu/IT+YOfqVCNVE7ecgiLPacsFyHZecmm/wK7cXMeSjzNtiHASrecw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            RFID = "123456789",
                            Salary = 0m,
                            SecurityStamp = "27a510f7-a0ad-4c7e-84b1-26b751660ad8",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("6bce7f0c-4460-4b56-b0c2-c1bca44db2d5"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "fe82ed2d-8b3b-4709-988c-fa90debb4f7e",
                            CreatedOn = new DateTime(2022, 12, 7, 21, 43, 56, 315, DateTimeKind.Local).AddTicks(856),
                            EGN = "2934827162",
                            EmailConfirmed = true,
                            FirstName = "Johnny",
                            IsActive = true,
                            LastName = "Johnathan",
                            LockoutEnabled = true,
                            MiddleName = "Doe",
                            NormalizedUserName = "JOHN",
                            PasswordHash = "AQAAAAEAACcQAAAAEEG31bDVgPY8eVsnZg7Jw0RBfSgUQntGLitLpAq5x2DvOxzRMxRPmtkGPzPaXWINqw==",
                            PhoneNumber = "08923471624",
                            PhoneNumberConfirmed = false,
                            RFID = "324123539",
                            Salary = 9000m,
                            SecurityStamp = "e02a17d2-e90a-4dd3-8ada-43ae3df1bda8",
                            TwoFactorEnabled = false,
                            UserName = "John"
                        });
                });

            modelBuilder.Entity("HotelManagement.Data.Models.UserModels.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f23493fb-e3c0-4cea-8404-9b79361291d4"),
                            ConcurrencyStamp = "a4958d33-1d96-4ff1-a27b-df9cbb2a46dd",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("08b4f8c4-b864-4a53-a32e-06de1bc719ac"),
                            ConcurrencyStamp = "d44c7d61-926d-4388-bc5a-cd1d3def6d96",
                            Name = "f&b",
                            NormalizedName = "F&B"
                        },
                        new
                        {
                            Id = new Guid("275f7748-cd52-48bb-8809-a84fa4f11e7e"),
                            ConcurrencyStamp = "f6392e6c-bcf0-47aa-80c0-aacd4556729f",
                            Name = "Human Resources",
                            NormalizedName = "HUMAN RESOURCES"
                        },
                        new
                        {
                            Id = new Guid("f2e65074-9d5d-428b-8e33-917b11d323f5"),
                            ConcurrencyStamp = "3d8f28a1-4bc3-4de2-8928-8edb734d6d74",
                            Name = "Director",
                            NormalizedName = "DIRECTOR"
                        },
                        new
                        {
                            Id = new Guid("49533d2e-e49c-4f9c-aebd-4c2296a792ea"),
                            ConcurrencyStamp = "a2e98dd7-a913-492a-baea-8f4a5466e29b",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("2239660f-9cd7-40a5-8c95-a1041451b375"),
                            ConcurrencyStamp = "8e774255-5454-45f9-9d48-340055a53d77",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = new Guid("0b2967c0-87f8-4634-8500-b6224f482bb7"),
                            ConcurrencyStamp = "9ea1191c-3c2c-445f-9a70-3d0986c1488f",
                            Name = "Front Desk",
                            NormalizedName = "FRONT DESK"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("36fdc4d6-b4cc-4608-8f95-03c45b3c645f"),
                            RoleId = new Guid("2239660f-9cd7-40a5-8c95-a1041451b375")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.EmployeeDepartment", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.UserModels.ApplicationUser", "ApplicationUser")
                        .WithMany("EmployeeDepartment")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Data.Models.Models.Department", "Department")
                        .WithMany("EmployeeDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Reservation", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.Models.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.RoleDepartment", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.Models.Department", "Department")
                        .WithMany("RoleDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Data.Models.Models.RoleName", "RoleName")
                        .WithMany("RoleDepartment")
                        .HasForeignKey("RoleNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("RoleName");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Room", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.Models.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Data.Models.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.UserModels.ApplicationUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.UserModels.ApplicationUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Data.Models.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Department", b =>
                {
                    b.Navigation("EmployeeDepartment");

                    b.Navigation("RoleDepartment");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.RoleName", b =>
                {
                    b.Navigation("RoleDepartment");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Room", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.UserModels.ApplicationUser", b =>
                {
                    b.Navigation("EmployeeDepartment");
                });
#pragma warning restore 612, 618
        }
    }
}
