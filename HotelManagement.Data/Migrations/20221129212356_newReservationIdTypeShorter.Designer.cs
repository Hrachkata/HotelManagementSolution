// <auto-generated />
using System;
using HotelManagement.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HotelManagement.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221129212356_newReservationIdTypeShorter")]
    partial class newReservationIdTypeShorter
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 11, 29, 23, 23, 56, 260, DateTimeKind.Local).AddTicks(6327),
                            Description = "Some Department",
                            IsActive = true,
                            Name = "F&B"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 11, 29, 23, 23, 56, 260, DateTimeKind.Local).AddTicks(6374),
                            Description = "This is the human resource department with access to employee management and hiring new employees.",
                            IsActive = true,
                            Name = "Human Resources"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2022, 11, 29, 23, 23, 56, 260, DateTimeKind.Local).AddTicks(6378),
                            Description = "This is the IT department with access to employee management, hiring new employees, admin panel and front desk.",
                            IsActive = true,
                            Name = "IT department"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2022, 11, 29, 23, 23, 56, 260, DateTimeKind.Local).AddTicks(6383),
                            Description = "This is the front desk/reception department with access to reservations and front desk.",
                            IsActive = true,
                            Name = "Reservations"
                        },
                        new
                        {
                            Id = 5,
                            CreatedOn = new DateTime(2022, 11, 29, 23, 23, 56, 260, DateTimeKind.Local).AddTicks(6387),
                            Description = "This is the director department with access to employee management, hiring new employees, admin panel and front desk.",
                            IsActive = true,
                            Name = "Director"
                        },
                        new
                        {
                            Id = 6,
                            CreatedOn = new DateTime(2022, 11, 29, 23, 23, 56, 260, DateTimeKind.Local).AddTicks(6393),
                            Description = "This is full access! NOT RECOMMENDED",
                            IsActive = true,
                            Name = "Owner"
                        });
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.EmployeeDepartment", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("ApplicationUserId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("EmployeesDepartments");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Floor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FloorNumber")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorNumber = 1,
                            IsActive = true
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorNumber = 2,
                            IsActive = true
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorNumber = 3,
                            IsActive = true
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorNumber = 4,
                            IsActive = true
                        });
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Reservation", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ArrivalDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DepartureDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("GuestEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestFirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestNationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GuestPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool?>("LateDeparture")
                        .HasColumnType("bit");

                    b.Property<int?>("NumberOfChildren")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfGuests")
                        .HasColumnType("int");

                    b.Property<int>("RoomId")
                        .HasColumnType("int");

                    b.Property<decimal?>("totalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservations");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.RoleDepartment", b =>
                {
                    b.Property<int>("RoleNameId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("RoleNameId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("RolesDepartments");

                    b.HasData(
                        new
                        {
                            RoleNameId = 1,
                            DepartmentId = 1
                        },
                        new
                        {
                            RoleNameId = 2,
                            DepartmentId = 2
                        },
                        new
                        {
                            RoleNameId = 3,
                            DepartmentId = 3
                        },
                        new
                        {
                            RoleNameId = 2,
                            DepartmentId = 3
                        },
                        new
                        {
                            RoleNameId = 6,
                            DepartmentId = 3
                        },
                        new
                        {
                            RoleNameId = 6,
                            DepartmentId = 4
                        },
                        new
                        {
                            RoleNameId = 3,
                            DepartmentId = 5
                        },
                        new
                        {
                            RoleNameId = 2,
                            DepartmentId = 5
                        },
                        new
                        {
                            RoleNameId = 5,
                            DepartmentId = 5
                        },
                        new
                        {
                            RoleNameId = 1,
                            DepartmentId = 6
                        },
                        new
                        {
                            RoleNameId = 2,
                            DepartmentId = 6
                        },
                        new
                        {
                            RoleNameId = 3,
                            DepartmentId = 6
                        },
                        new
                        {
                            RoleNameId = 4,
                            DepartmentId = 6
                        },
                        new
                        {
                            RoleNameId = 5,
                            DepartmentId = 6
                        },
                        new
                        {
                            RoleNameId = 6,
                            DepartmentId = 6
                        });
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.RoleName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("NameOfRole")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoleName");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            NameOfRole = "F&B"
                        },
                        new
                        {
                            Id = 2,
                            NameOfRole = "HUMAN RESOURCES"
                        },
                        new
                        {
                            Id = 3,
                            NameOfRole = "ADMIN"
                        },
                        new
                        {
                            Id = 4,
                            NameOfRole = "DIRECTOR"
                        },
                        new
                        {
                            Id = 5,
                            NameOfRole = "OWNER"
                        },
                        new
                        {
                            Id = 6,
                            NameOfRole = "FRONT DESK"
                        });
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCleaned")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOccupied")
                        .HasColumnType("bit");

                    b.Property<bool>("IsOutOfService")
                        .HasColumnType("bit");

                    b.Property<int>("RoomNumber")
                        .HasColumnType("int");

                    b.Property<int>("RoomTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FloorId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Capacity = 3,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 1,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 101,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 2,
                            Capacity = 4,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 1,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 102,
                            RoomTypeId = 2
                        },
                        new
                        {
                            Id = 3,
                            Capacity = 4,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 1,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 103,
                            RoomTypeId = 2
                        },
                        new
                        {
                            Id = 4,
                            Capacity = 4,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 1,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 104,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 5,
                            Capacity = 3,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 1,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = true,
                            IsOutOfService = false,
                            RoomNumber = 105,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 6,
                            Capacity = 3,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 1,
                            IsActive = true,
                            IsCleaned = false,
                            IsOccupied = false,
                            IsOutOfService = true,
                            RoomNumber = 106,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 7,
                            Capacity = 3,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 1,
                            IsActive = true,
                            IsCleaned = false,
                            IsOccupied = false,
                            IsOutOfService = true,
                            RoomNumber = 107,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 8,
                            Capacity = 2,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 2,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 201,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 9,
                            Capacity = 1,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 2,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 202,
                            RoomTypeId = 2
                        },
                        new
                        {
                            Id = 10,
                            Capacity = 4,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 2,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 203,
                            RoomTypeId = 2
                        },
                        new
                        {
                            Id = 11,
                            Capacity = 1,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 2,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 204,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 12,
                            Capacity = 1,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 2,
                            IsActive = true,
                            IsCleaned = false,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 205,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 13,
                            Capacity = 1,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 2,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = true,
                            RoomNumber = 205,
                            RoomTypeId = 1
                        },
                        new
                        {
                            Id = 14,
                            Capacity = 2,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 3,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 301,
                            RoomTypeId = 3
                        },
                        new
                        {
                            Id = 15,
                            Capacity = 1,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 3,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 302,
                            RoomTypeId = 2
                        },
                        new
                        {
                            Id = 16,
                            Capacity = 4,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 3,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 303,
                            RoomTypeId = 3
                        },
                        new
                        {
                            Id = 17,
                            Capacity = 4,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 3,
                            IsActive = true,
                            IsCleaned = false,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 303,
                            RoomTypeId = 3
                        },
                        new
                        {
                            Id = 18,
                            Capacity = 2,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 4,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 401,
                            RoomTypeId = 4
                        },
                        new
                        {
                            Id = 19,
                            Capacity = 2,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            FloorId = 4,
                            IsActive = true,
                            IsCleaned = true,
                            IsOccupied = false,
                            IsOutOfService = false,
                            RoomNumber = 402,
                            RoomTypeId = 4
                        });
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.RoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("PricePerPerson")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RoomTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            PricePerPerson = 100m,
                            Type = "Standard"
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            PricePerPerson = 150m,
                            Type = "Apartment"
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            PricePerPerson = 250m,
                            Type = "Deluxe"
                        },
                        new
                        {
                            Id = 4,
                            CreatedOn = new DateTime(2022, 11, 29, 0, 0, 0, 0, DateTimeKind.Local),
                            IsActive = true,
                            PricePerPerson = 400m,
                            Type = "President"
                        });
                });

            modelBuilder.Entity("HotelManagement.Data.Models.UserModels.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("EGN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EditedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RFID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d34faca5-b1dd-41ed-b14d-4bd9b1e30d9c"),
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "2407c95b-f5dd-4977-a807-52b521804aa4",
                            CreatedOn = new DateTime(2022, 11, 29, 23, 23, 56, 251, DateTimeKind.Local).AddTicks(8284),
                            EGN = "123",
                            EmailConfirmed = true,
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "Admin",
                            LockoutEnabled = false,
                            MiddleName = "Admin",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEDYDE227fr50qukrYpCRwyldZKlg3UgLczMz14BVohQJbLCyr7itqYpa+6s5IhBhjg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            RFID = "123456789",
                            Salary = 0m,
                            SecurityStamp = "2487d8c8-66b6-47d7-9307-6c5125a9723e",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("HotelManagement.Data.Models.UserModels.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3289340f-7165-4150-ac12-3b502d26f065"),
                            ConcurrencyStamp = "e4bf35a2-6107-4f77-8105-1137a3532a31",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("0d817987-c69d-4625-a476-f54fc7b1a702"),
                            ConcurrencyStamp = "04256412-479a-4380-92fe-40eacb8c6347",
                            Name = "f&b",
                            NormalizedName = "F&B"
                        },
                        new
                        {
                            Id = new Guid("0debc6f3-8e52-4db9-882f-29bc2dd20de8"),
                            ConcurrencyStamp = "6c0c43d5-ed07-47b3-9f7a-c71d48cdbcab",
                            Name = "Human Resources",
                            NormalizedName = "HUMAN RESOURCES"
                        },
                        new
                        {
                            Id = new Guid("601fff8e-a0d6-4dcc-8d94-1e4c82d67cb9"),
                            ConcurrencyStamp = "d31cf26b-7155-4e68-8b7c-ff52c2e5b3fb",
                            Name = "Director",
                            NormalizedName = "DIRECTOR"
                        },
                        new
                        {
                            Id = new Guid("a91a92b8-ed8f-4adf-9efb-69aeddd59d9a"),
                            ConcurrencyStamp = "ac2486a8-9651-45ba-b512-fad7eea5fc81",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("529f6a9f-c70b-498e-aac1-992a7222c34d"),
                            ConcurrencyStamp = "adf2d6bb-6fec-42a5-8a24-513e7d50420d",
                            Name = "Owner",
                            NormalizedName = "OWNER"
                        },
                        new
                        {
                            Id = new Guid("10dbedd5-bb39-40a2-80cd-6188996a00b2"),
                            ConcurrencyStamp = "b46bd8d5-fe72-4f45-9750-cfeadac8e776",
                            Name = "Front Desk",
                            NormalizedName = "FRONT DESK"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d34faca5-b1dd-41ed-b14d-4bd9b1e30d9c"),
                            RoleId = new Guid("529f6a9f-c70b-498e-aac1-992a7222c34d")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.EmployeeDepartment", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.UserModels.ApplicationUser", "ApplicationUser")
                        .WithMany("EmployeeDepartment")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Data.Models.Models.Department", "Department")
                        .WithMany("EmployeeDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Reservation", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.Models.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.RoleDepartment", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.Models.Department", "Department")
                        .WithMany("RoleDepartment")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Data.Models.Models.RoleName", "RoleName")
                        .WithMany("RoleDepartment")
                        .HasForeignKey("RoleNameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("RoleName");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Room", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.Models.Floor", "Floor")
                        .WithMany("Rooms")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Data.Models.Models.RoomType", "RoomType")
                        .WithMany("Rooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Floor");

                    b.Navigation("RoomType");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.UserModels.ApplicationUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.UserModels.ApplicationUserRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HotelManagement.Data.Models.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("HotelManagement.Data.Models.UserModels.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Department", b =>
                {
                    b.Navigation("EmployeeDepartment");

                    b.Navigation("RoleDepartment");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Floor", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.RoleName", b =>
                {
                    b.Navigation("RoleDepartment");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.Room", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.Models.RoomType", b =>
                {
                    b.Navigation("Rooms");
                });

            modelBuilder.Entity("HotelManagement.Data.Models.UserModels.ApplicationUser", b =>
                {
                    b.Navigation("EmployeeDepartment");
                });
#pragma warning restore 612, 618
        }
    }
}
